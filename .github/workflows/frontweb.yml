name: frontweb
on:
  push:
    branches:
      - 'feature**'
    paths:
      - 'frontWebApp/**'

jobs:
  automerge-1:
    name: Merge 'develop -> feature'
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, '(azul)') }}
    outputs:
      salida: ${{ steps.prepare_release.outputs.respuesta }}
    steps:
      - name: Integrar develop en feature
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: develop
          target-branch: ${{ github.ref }}
          commit-message: "Actualizar rama feature con respecto a develop"
      - name: prepare_release
        id: prepare_release
        run: |
          echo "::set-output name=respuesta::$(echo "${{ github.event.head_commit.message }}" | awk '{print $NF}')"

  run-tests-front:
    name: Build and test front-end
    runs-on: ubuntu-latest
    needs: 'automerge-1'
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v2

      # Instala Node.js y Angular CLI
      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.x'

      # Instala las dependencias de Angular
      - name: Instalar dependencias de Angular
        working-directory: ./frontWebApp/
        run: npm install -g @angular/cli
      - name: Instalar dependencias
        working-directory: ./frontWebApp/
        run: npm install

      # Compila la aplicación Angular
      - name: Compilar la aplicación Angular
        working-directory: ./frontWebApp/
        run: ng build

      # Ejecuta las pruebas de Angular y falla si es menor al 80%
      - name: Ejecutar pruebas de Angular
        working-directory: ./frontWebApp/
        run: ng test --no-watch --no-progress --code-coverage --browsers=ChromeHeadlessCI

  terraform:
    name: Despliegue Frontweb
    needs: 'automerge-1'
    uses: ./.github/workflows/terraform.yml
    with:
      terraform_directory: frontWebApp
      bucket: 'tfstate-proyecto-final'
      key: 'frontweb.terraform.tfstate'
    secrets:
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}
      aws-s3-bucket: ${{ secrets.AWS_S3_BUCKET }}

  automerge-2:
    name: Merge 'feature -> develop'
    runs-on: ubuntu-latest
    needs: ['run-tests-front', 'terraform' ]
    steps:
      - name: Integrar feature en develop
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: ${{ github.ref }}
          target-branch: develop
          commit-message: "Integrar rama feature en develop"

  push-image:
    name: ecr
    runs-on: ubuntu-latest
    needs: 'automerge-2'
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2

      - name: Setup AWS Credentials
        id: setup-aws
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: front-sportapp
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f frontWebApp/Dockerfile frontWebApp
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG