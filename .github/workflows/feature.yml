### Automatización de merging de ramas feature/** que se van a integrar con la rama develop.
name: Feature
on:
  push:
    branches:
      - 'feature**'

      
jobs:
  # Parte de Feature:
  # Integra las ramas develop -> feature.
  # La palabra clave que activa el merge a develop es "(azul)".
  automerge-1:
    name: Merge 'develop -> feature'
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.head_commit.message, '(azul)') }}
    outputs:
      salida: ${{ steps.prepare_release.outputs.respuesta }}
    steps:
      - name: Integrar develop en feature
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: develop
          target-branch: ${{ github.ref }}
          commit-message: "Actualizar rama feature con respecto a rama develop"
      - name: prepare_release
        id: prepare_release
        run: |
          echo "::set-output name=respuesta::$(echo "${{ github.event.head_commit.message }}" | awk '{print $NF}')"

  run-tests-front:
    name: Build and test front-end 
    name: Build and test front-end 
    runs-on: ubuntu-latest
    needs: 'automerge-1'
    needs: 'automerge-1'
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v2
  
      # Instala Node.js y Angular CLI
      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.x'
  
      # Instala las dependencias de Angular
      - name: Instalar dependencias de Angular
        working-directory: ./frontWebApp/
        run: npm install -g @angular/cli
      - name: Instalar dependencias
        working-directory: ./frontWebApp/
        run: npm install
  
      # Compila la aplicación Angular
      - name: Compilar la aplicación Angular
        working-directory: ./frontWebApp/
        run: ng build 
  
      # Ejecuta las pruebas de Angular y falla si es menor al 80%
      - name: Ejecutar pruebas de Angular
        working-directory: ./frontWebApp/
        run: ng test --no-watch --no-progress --code-coverage --browsers=ChromeHeadlessCI
      
  # Luego de integrar con develop, corre las pruebas de cobertura.
  # Si pasan bien, integra feature a develop.
  # Si fallan, no integra y falla el job.
  run-tests-1:
    name: Integration tests
    runs-on: ubuntu-latest
    env:
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
      AUTH0_API_IDENTIFIER: ${{ secrets.AUTH0_API_IDENTIFIER }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
    services:
      users:
        image: postgres
        env:
          POSTGRES_PASSWORD: prueba
          POSTGRES_USER: prueba
          POSTGRES_DB: prueba
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5    
    needs: 'automerge-1'
    steps:
      - name: Checkout de repositorio
        uses: actions/checkout@v4
      - name: Configuracion de entorno de Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Dependencies
        working-directory: ./backend/services/users
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Start FastAPI App
        working-directory: ./backend/services/users
        run: |
          nohup uvicorn main:app --host 0.0.0.0 --port 8000 &
      - name: Run Tests
        working-directory: ./backend/services/users
        run: |
          coverage run -m pytest tests/* -v
      - name: Run cov report
        working-directory: ./backend/services/users
        run: |
          coverage report --fail-under=85
      
      # Espacio para pruebas de Angular ----------------------------------------------
      #- name: Configuración de Node.js para pruebas de Angular
      #  uses: actions/setup-node@v2
      #  with:
      #    node-version: '16' # Usa la versión de Node.js que necesites

      #- name: Instalación de dependencias de Angular
      #  run: |
      #    cd tu-directorio-angular # Cambia esto al directorio de tu proyecto Angular
      #    npm install

      #- name: Ejecución de pruebas de Angular
      #  run: |
      #    cd frontWebApp
      #    npm run test

      # Espacio para pruebas de Android ----------------------------------------------
      #- name: Configuración del entorno de Java para Android
      #  uses: actions/setup-java@v3
      #  with:
      #    java-version: '11' # Usa la versión de Java que necesites para tu proyecto Android
      #    distribution: 'temurin' # Puedes cambiar esto según tu preferencia

      #- name: Instalación de dependencias de Android
      #  run: |
      #    cd tAndroidApp # Cambia esto al directorio de tu proyecto Android
      #    ./gradlew dependencies

      #- name: Ejecución de pruebas de Android
      #  run: |
      #    cd AndroidApp # Asegúrate de estar en el directorio correcto
      #    ./gradlew test # Ajusta este comando según tus necesidades de pruebas


  # Luego de pruebas exitosas, integra las ramas.
  # feature -> develop
  
  run-tests-front:
    name: Build and test front-end
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v2

      # Instala Node.js y Angular CLI
      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '21.x'

      # Instala las dependencias de Angular
      - name: Instalar dependencias de Angular
        run: npm install -g @angular/cli
      - name: Instalar dependencias
        run: npm install

      # Compila la aplicación Angular
      - name: Compilar la aplicación Angular
        run: ng build --prod

      # Ejecuta las pruebas de Angular
      - name: Ejecutar pruebas de Angular
        run: ng test --watch=false --code-coverage
      - name: Verificar cobertura
        run: |
          COVERAGE_THRESHOLD=80
          coverage=$(cat coverage/lcov.info | grep -oP '^.*(?=%)')
          if [ "$coverage" -lt "$COVERAGE_THRESHOLD" ]; then
            echo "La cobertura es inferior al 80% ($coverage%)."
            exit 1
          fi
  
  automerge-2:
    name: Merge 'feature -> develop'
    runs-on: ubuntu-latest
    needs: ['run-tests-1', 'run-tests-front']
    steps:
      - name: Integrar feature en develop
        uses: tukasz/direct-merge-action@master
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          source-branch: ${{ github.ref }}
          target-branch: develop
          commit-message: "Integrar rama feature en develop (crearRelease)"
